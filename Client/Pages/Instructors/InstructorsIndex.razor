@page "/instructors"
@using CourseManagerApp.Client.Services
@using CourseManagerApp.Shared.Models
@namespace Client.Pages.Instructors
@inherits Microsoft.AspNetCore.Components.ComponentBase
@inject IJSRuntime JSRuntime

<PageTitle>Instructors</PageTitle>

<h3>Instructors</h3>

<a href="instructors/details" class="btn btn-success">Add new Instructor</a>
<br />

@if (Instructors != null && Instructors.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Office Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var instructor in Instructors)
            {
                <tr>
                    <td>@instructor.InstructorID</td>
                    <td>@instructor.Name</td>
                    <td>@instructor.Email</td>
                    <td>@instructor.OfficeNumber</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditInstructor(instructor.InstructorID)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteInstructor(instructor.InstructorID, JSRuntime)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No instructors available.</p>
}

@code {
    [Inject]
    private IInstructorService InstructorService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private IEnumerable<Instructor> Instructors { get; set; } = new List<Instructor>();
 
    
    protected override async Task OnInitializedAsync()
    {
        var apiInstructors = await InstructorService.GetAll();
        if (apiInstructors != null && apiInstructors.Any())
        {
            Instructors = apiInstructors;
        }
    }

    private void EditInstructor(int instructorId)
    {
        NavigationManager.NavigateTo($"instructors/Details/{instructorId}");
    }

    private async Task DeleteInstructor(int instructorId, IJSRuntime jsRuntime)
    {
        var confirmation = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this instructor?");

        if (confirmation)
        {
            var result = await InstructorService.DeleteInstructor(instructorId);

            if (result)
            {
                Instructors =  await InstructorService.GetAll();
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "Failed to delete the instructor. Please try again.");
            }
        }
    }

}
