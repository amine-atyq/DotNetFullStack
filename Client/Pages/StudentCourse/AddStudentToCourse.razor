<!-- AddStudentToCourse.razor -->
@page "/enrollments"
@using CourseManagerApp.Shared.Models
@using CourseManagerApp.Client.Services
@using System.Text.Json

<PageTitle>Enroll Students to Course</PageTitle>

<h3>Enroll Students to Course</h3>

<div class="form-group">
    <label for="courseDropdown">Select Course:</label>
    <select class="form-control" id="courseDropdown" @bind="selectedCourseId">
        <option value="0">Select a Course</option>
        @foreach (var course in courses)
        {
            <option value="@course.CourseID">@course.Title</option>
        }
    </select>
</div>


<button class="btn btn-primary" @onclick="EnrollStudents">Enroll Selected Students</button>

@if (students.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Enroll</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.StudentID</td>
                    <td>@student.Name</td>
                    <td>
                        <input type="checkbox" @onchange="e => ToggleStudentSelection(e, student.StudentID)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No students available.</p>
}

@code {
    private int selectedCourseId;
    private List<Course> courses = new List<Course>();
    private List<Student> students = new List<Student>();
    private List<int> selectedStudentIds = new List<int>();
    [Inject]
    private ICourseService CourseService { get; set; }
    
    [Inject]
    private IStudentService StudentService { get; set; }

    [Inject]
    private IStudentCourseService StudentCourseService { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        courses = (await CourseService.GetAll())?.ToList() ?? new List<Course>();
        students = (await StudentService.GetAll())?.ToList() ?? new List<Student>();
        
        
    }

    private void ToggleStudentSelection(ChangeEventArgs e, int studentId)
    {
        if ((bool)e.Value)
        {
            selectedStudentIds.Add(studentId);
        }
        else
        {
            selectedStudentIds.Remove(studentId);
        }
    }

    private async Task EnrollStudents()
    {
        try
        {
            // Print selectedStudentIds to console
            Console.WriteLine("Selected Student IDs:");
            foreach (var studentId in selectedStudentIds)
            {
                Console.WriteLine(studentId);
            }

            Console.WriteLine($"Selected Course ID: {selectedCourseId}");

            Course course = await CourseService.GetCourse(selectedCourseId);
            if (selectedCourseId > 0 && selectedStudentIds.Any())
            {
                foreach (var studentId in selectedStudentIds)
                {
                    Student student = await StudentService.GetStudent(studentId);
                    var studentCourse = new StudentCourse
                    {   
                        StudentID = studentId,
                        Course = course,
                        CourseID = selectedCourseId,
                        Student = student
                        
                    };
                    Console.WriteLine($"StudentCourse object: {JsonSerializer.Serialize(studentCourse)}");

                    var result = await StudentCourseService.AddStudentCourse(studentCourse);

                    if (result != null)
                    {
                        // Enrollment successful, you may add additional logic or notifications here.
                        Console.WriteLine($"Student {result.Student.Name} enrolled in course {result.Course.Title}");
                    }
                }

                // Clear selected students after enrollment
                selectedStudentIds.Clear();
            }
            else
            {
                // Display an error message or notification if needed.
                await JSRuntime.InvokeVoidAsync("alert", "Please select a course and at least one student to enroll.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            // Handle the exception as needed
        }
    }


}
