<!-- AddStudentToCourse.razor -->
@page "/AddStudentsToCourse"
@using CourseManagerApp.Shared.Models
@using CourseManagerApp.Client.Services
@using System.Text.Json

<PageTitle>Enroll Students to Course</PageTitle>

<div class="container mt-4">
    <h3 class="text-center">Enroll Students to Course</h3>
    
        <div class="d-flex justify-content-center"> <!-- Center the row -->
            <div class="col-6 form-group">
                <select class="form-control" id="courseDropdown" @bind="selectedCourseId">
                    <option value="0">Select a Course</option>
                    @foreach (var course in courses)
                    {
                        <option value="@course.CourseID">@course.Title</option>
                    }
                </select>
            </div>
    
            <div class="col-6">
                <button class="btn btn-primary btn-block" @onclick="ShowStudents">Show Students</button>
            </div>
        </div>

    @if (IsButtonClicked)
    {

        @if (students.Any())
        {
            <table class="table table-bordered table-striped mt-4">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Date of Birth</th>
                        <th>Enroll</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in students)
                    {
                        <tr>
                            <td>@student.StudentID</td>
                            <td>@student.Name</td>
                            <td>@student.Email</td>
                            <td>@student.DateOfBirth.ToShortDateString()</td>
                            <!-- Inside the table body -->
                            <td>
                                <input type="checkbox" checked="@IsEnrolled(student.StudentID)" @onchange="e => ToggleStudentEnrollment(e, student.StudentID)" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <button class="btn btn-success mt-3" @onclick="SaveChanges">Save Changes</button>
        }
        else
        {
            <p class="mt-3">No students available.</p>
        }
    }
</div>
@code {
    private int selectedCourseId;
    private List<Course> courses = new List<Course>();
    private List<Student> students = new List<Student>();
    private List<StudentCourse> studentCourses = new List<StudentCourse>();
    private bool IsButtonClicked { get; set; }

    [Inject]
    private ICourseService CourseService { get; set; }

    [Inject]
    private IStudentService StudentService { get; set; }

    [Inject]
    private IStudentCourseService StudentCourseService { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        students = (await StudentService.GetAll())?.ToList() ?? new List<Student>();
        courses = (await CourseService.GetAll())?.ToList() ?? new List<Course>();
        studentCourses = (await StudentCourseService.GetAll())?.ToList() ?? new List<StudentCourse>();
    }

    private void ShowStudents()
    {
        IsButtonClicked = true;
        
    }
    
    private bool IsEnrolled(int studentId)
    {
        return studentCourses.Any(sc => sc.StudentID == studentId && sc.CourseID == selectedCourseId);
    }
    
    private void ToggleStudentEnrollment(ChangeEventArgs e, int studentId)
    {
        // Implement logic to enroll or unenroll the student based on the checkbox state
        if ((bool)e.Value)
        {
            // Enroll the student
            // Add the logic to enroll the student in the selected course
            var newEnrollment = new StudentCourse
            {
                StudentID = studentId,
                CourseID = selectedCourseId
            };
            studentCourses.Add(newEnrollment);
        }
        else
        {
            var enrollmentToRemove = studentCourses.FirstOrDefault(sc => sc.StudentID == studentId && sc.CourseID == selectedCourseId);
            if (enrollmentToRemove != null)
            {
                studentCourses.Remove(enrollmentToRemove);
            }
        }
    }
    
    private async Task SaveChanges()
    {
        try
        {
            // Log the content of studentCourses before making the API call
            Console.WriteLine("Student Courses to Update:");
            foreach (var enrollment in studentCourses)
            {
                Console.WriteLine($"StudentID: {enrollment.StudentID}, CourseID: {enrollment.CourseID}");
            }

            if (studentCourses != null && studentCourses.Any())
            {
                await StudentCourseService.UpdateEnrollments(selectedCourseId, studentCourses);

                IsButtonClicked = false;

                await JSRuntime.InvokeVoidAsync("alert", "Changes saved successfully.");
            }
            else
            {
                Console.WriteLine("No valid studentCourses data to update.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving changes: {ex.Message}");
            // Handle the exception as needed
        }
    }

}
