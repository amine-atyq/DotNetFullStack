@page "/courses"
@using CourseManagerApp.Client.Services
@using CourseManagerApp.Shared.DTO
@using CourseManagerApp.Shared.Models
@namespace Client.Pages.Courses
@inject IJSRuntime JSRuntime

<PageTitle>Courses</PageTitle>
<div class="text-center mb-8"> 
    <h3>Courses</h3>
</div>

<a href="courses/Details" class="btn btn-success">Add new Course</a>
<br />

<div class="card mt-4">
    <div class="card-body">
        @if (Courses != null && Courses.Any())
        {
            <table class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Study Hours</th>
                        <th>Instructor</th>
                        <th>Actions</th>
                        <th>Enrolled Students</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var course in Courses)
                    {
                        <tr>
                            <td>@course.CourseID</td>
                            <td>@course.Title</td>
                            <td>@course.Description</td>
                            <td>@course.StudyHours</td>
                            <td>@course.InstructorName</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => EditCourse(course.CourseID)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => DeleteCourse(course.CourseID, JSRuntime)">Delete</button>
                                <button class="btn btn-info" @onclick="() => ShowInstructor(course.InstructorID)">Show Instructor</button>
                            </td>
                            <td>
                                <button class="btn btn-warning" @onclick="() => ShowEnrolledStudents(course.CourseID)">View Enrolled Students</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No courses available.</p>
        }
    </div>
</div>
@code {
    [Inject]
    private ICourseService CourseService { get; set; }
    
    [Inject]
    private IInstructorService InstructorService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    
    private IEnumerable<CourseDto> Courses { get; set; } = new List<CourseDto>();


    protected override async Task OnInitializedAsync()
    {
        var apiCourses = await CourseService.GetAllCoursesWithInstructorNames();
        if (apiCourses != null && apiCourses.Any())
        {
            Courses = apiCourses;
        }
    }

    private void EditCourse(int courseId)
    {
        NavigationManager.NavigateTo($"courses/Details/{courseId}");
    }

    private async Task DeleteCourse(int courseId, IJSRuntime jsRuntime)
    {
        var confirmation = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this course?");

        if (confirmation)
        {
            var result = await CourseService.DeleteCourse(courseId);

            if (result)
            {
                Courses = await CourseService.GetAllCoursesWithInstructorNames();
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "Failed to delete the course. Please try again.");
            }
        }
    }

    private void ShowInstructor(int? instructorId)
    {
        if (instructorId.HasValue)
        {
            NavigationManager.NavigateTo($"courses/Instructor/{instructorId.Value}");
        }

    }
 

    private async Task<string> GetInstructorName(int? instructorId)
    {
        if (instructorId.HasValue)
        {
            try
            {
                var instructor = await InstructorService.GetInstructor(instructorId.Value);
                return instructor?.Name ?? "N/A";
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return "N/A";
            }
        }
        else
        {
            return "N/A";
        }
    }
    
    private void ShowEnrolledStudents(int courseId)
    {
        NavigationManager.NavigateTo($"courses/EnrolledStudents/{courseId}");
    }


   
}
